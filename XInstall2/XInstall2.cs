using System;
using System.Collections;
using System.IO;
using System.Xml;

/*
 * Class Name    : XInstallRunner
 * Inherient     : none
 * Functionality : The executable entry
 *
 *
 * Created Date  : May 2003
 * Created By    : mliang
 *
 * Change Log    :
 *
 * who        when            what
 * --------------------------------------------------------------------------
 * mliang     05/01/2003      Initial creation
 * mliang     01/28/2005      1. a logic was added to parsing
 *                               command line. The syntax is
 *                               -|/ (| stands for or) switch character:value.
 *                            2. Method ProcessUpdateVariables was
 *                                     added to support command line
 *                                     interface.  The syntax for this
 *
 *                                 -D:package_name.variable_name=update_value
 * mliang     02/01/2005     fix a minor bug in parsing the command line options:
 *                           the part for -loadxml should remove the : before passing
 *                           the file name to the constructor.
 */

using XInstall.Util;

namespace XInstall {
    class MessageWrapper : ISendLogMessage {
        public MessageWrapper() {}

#region ISendLogMessage Members

        public void SendLogMessage(Error AnError) {
            Console.WriteLine( AnError.ToString() );
        }

#endregion
    }

    /// <summary>
    /// class XInstallRunner - is an entry point for
    /// the XInstall program.
    /// </summary>
    class XInstallRunner {
        /// <summary>
        /// Start program from here and make all initializations and
        /// handling exception generated by other objects.
        /// </summary>
        static void Main(string[] Args) {
            MessageWrapper MessageProtocal = new MessageWrapper();
            XInstallRunner ThisRunner = new XInstallRunner();


            XInstall XInstaller  = null;
            Hashtable UpdateVars = new Hashtable();

            // instaniciate the XInstall object and run it
            string strXmlConfig = "Config.xml";

            if ( Args != null && Args.Length > -1 ) {
                foreach ( string Arg in Args ) {
                    if ( Arg.StartsWith( @"-" ) ||
                            Arg.StartsWith( @"/" ) ) {
                        string MyArg = Arg.Trim( '-', '/' ).Substring(0, Arg.IndexOf( ":" ) );
                        switch ( MyArg ) {
                            case "loadxml:":
                                strXmlConfig = Arg.Substring( Arg.IndexOf( ":" ) + 1 );
                                break;
                            case "D:":
                                string Argument = Arg.Substring( Arg.IndexOf( ":" ) + 1 );
                                string[] Items = Argument.Split( new char[] { '='
                                                                        }
                                                               );
                                UpdateVars.Add( Items[0], Items[1] );
                                break;
                            case "Trace:":
                                bool OnOff = bool.Parse( Arg.Substring( Arg.IndexOf( ":" ) + 1 ) );
                                Trace.TraceOn = OnOff;
                                break;
                        }
                    }
                }
            }

            try {
                XInstaller = new XInstall( strXmlConfig, (ISendLogMessage) MessageProtocal );
                // XInstaller.SetSendMessageInterface( (ISendLogMessage) XInstaller );
                ProcessUpdateVariables( XInstaller, UpdateVars );
                XInstaller.StartGUI = false;
                XInstaller.Run();
            } catch ( Exception ex ) {
                Console.WriteLine( ex.Message );
            }
        }

        static void ProcessUpdateVariables( XInstall Installer, Hashtable Vars ) {
            if ( Vars != null && Vars.Count > 0 ) {
                foreach ( DictionaryEntry de in Vars ) {
                    string VarName  = de.Key.ToString();
                    string VarValue = de.Value.ToString();

                    string[] Items = VarName.Split( new char[]{ '.' } );

                    if ( Items != null && Items.Length >= 0 ) {
                        if ( Items != null && Items[0].Length == 0 )
                            throw new Exception( "you have to use PackageName.VarName=VarValue format" );

                        if ( Items[1].Length == 0 )
                            throw new Exception( "no value is provided" );

                        Installer.UpdateXmlVariable( Items[0], Items[1], VarValue );
                    }
                }
            }
        }

    }
}
